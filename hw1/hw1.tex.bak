\documentclass[letterpaper, 11pt]{article}
\usepackage{latexsym}
\usepackage{amssymb}
\usepackage{times}
%\usepackage[in]{fullpage}
\usepackage{amsmath,amsfonts,amsthm}
\usepackage{graphicx}

%\documentclass[11pt]{article}
%\pagestyle{myheadings}
%\usepackage[ruled,nothing]{algorithm}
%\usepackage{algorithmic}
%\usepackage[dvips]{epsfig,graphicx}
%\numberwithin{equation}{section}

\bibliographystyle{plain}

\newenvironment{newalgo}[2]{\begin{algorithm}

\caption{\textsc{#1}}\label{#2}

\begin{algorithmic}[1]}{\end{algorithmic}\end{algorithm}}



\newcommand{\gm}{\gamma}
\newcommand{\wh}{\widehat}
\newcommand{\rep}{representation}
\newcommand{\rv}{random variable}
\newcommand{\la}{\lambda}
\newcommand{\wt}{\widetilde}
\newcommand{\st}{such that}
\newcommand{\slvary}{slowly varying}
\newcommand{\ma}{moving average}
\newcommand{\regvary}{regularly varying}
\newcommand{\asy}{asymptotic}
\newcommand{\ts}{time series}
\newcommand{\id}{infinitely divisible}
\newcommand{\seq}{sequence}
\newcommand{\fidi}{finite dimensional \ds}

\newcommand{\ble}{\begin{lemma}}
\newcommand{\ele}{\end{lemma}}
\newcommand{\bfX}{{\bf X}}
\newcommand{\pro}{probabilit}
\newcommand{\BX}{{\bf X}}
\newcommand{\BY}{{\bf Y}}
\newcommand{\BZ}{{\bf Z}}
\newcommand{\BV}{{\bf V}}
\newcommand{\BW}{{\bf W}}
\newcommand{\reals}{{\mathbb R}}
\newcommand{\bbr}{\reals}

\newcommand{\balpha}{\mbox{\boldmath$\alpha$}}
\newcommand{\bbeta}{\mbox{\boldmath$\beta$}}
\newcommand{\bmu}{\mbox{\boldmath$\mu$}}
\newcommand{\tbmu}{\mbox{\boldmath${\tilde \mu}$}}
\newcommand{\bEta}{\mbox{\boldmath$\eta$}}


\def \br#1{\left \{#1 \right \}}
\def \pr#1{\left (#1 \right)}

\newcommand{\Gm}{\Gamma}
\newcommand{\ep}{\epsilon}


\newtheorem{lemma}{Lemma}[section]
\newtheorem{figur}[lemma]{Figure}
\newtheorem{theorem}[lemma]{Theorem}
\newtheorem{proposition}[lemma]{Proposition}
\newtheorem{definition}[lemma]{Definition}
\newtheorem{corollary}[lemma]{Corollary}
\newtheorem{example}[lemma]{Example}
\newtheorem{exercise}[lemma]{Exercise}
\newtheorem{remark}[lemma]{Remark}
\newtheorem{fig}[lemma]{Figure}
\newtheorem{tab}[lemma]{Table}
\newtheorem{fact}[lemma]{Fact}
\newtheorem{test}{Lemma}
\newtheorem{algorithm}[lemma]{Algorithm}

\newcommand{\play}{\displaystyle}

\newcommand{\ms}{measure}
\newcommand{\beao}{\begin{eqnarray*}}
\newcommand{\eeao}{\end{eqnarray*}\noindent}
\newcommand{\beam}{\begin{eqnarray}}
\newcommand{\eeam}{\end{eqnarray}\noindent}

\newcommand{\halmos}{\hfill\mbox{\qed}\\}
\newcommand{\fct}{function}
\newcommand{\ins}{insurance}
\newcommand{\ds}{distribution}

\newcommand{\one}{{\bf 1}}
\newcommand{\eid}{\buildrel{\rm d}\over {=}}
\newcommand {\Or}{\rm ORDER}
\newcommand {\In}{\rm INTER}

\newcommand{\bbd}{{\mathbb D}}
\newcommand{\vi}{$V_{ij}$ }
\newcommand{\rr}{R^{\prime\prime}}
%\newcommand{\R}{R^\prime}
\newcommand{\ci}{\frac{1}{c}}
\newcommand{\Vi}{V(n)}
\newcommand{\dR}{\mathcal R}
\newcommand{\md}[1]{\left(\ \rm{mod}\ \it{#1}\right)}
\newcommand{\So}{s}
%\begin{document}
%\def\DoubleSpace{\baselineskip=24pt}
%\DoubleSpace \sloppy

\begin{document}



\title{Parallel Programming \\ Assignment \#1: OpenMP Smoother}
\author{Yifan Ge }


\maketitle



\section{Problem 1}

Evaluate the functions \texttt{smoothSerialXY} and \texttt{smoothSerialYX} that iterate in column major and row major order respectively for kernels of size $3 \times 3$, $5 \times 5$, $7 \times 7$.\\

\begin{enumerate}
\item \textbf{What is the relative performance of the two functions. Give a runtime number (average of 20 trials) for both.}\\\\
\texttt{smoothSerialYX} show better performance over \texttt{smoothSerialXY}.
\begin{table}[h]
    \hspace{30pt}
    \begin{tabular}{|c|c|c|}
        \hline
        Running time (sec) & \texttt{smoothSerialXY} & \texttt{smoothSerialYX} \\ \hline
        $3 \times 3$          & 5.4520186             & 4.3357826             \\ 
        $5 \times 5$        & 11.9414182            & 10.8491422            \\ 
        $7 \times 7$         & 21.8240202            & 20.5165304            \\ 
        \hline
    \end{tabular}
    \caption{Performance comparison}
\end{table}
\item \textbf{Explain the performance difference.}
The performance difference is due to memory layout of array used in C. In C, arrays are stored in row major order. As the data stored in consecutive memory space can be fetched at the same time, \texttt{smoothSerialYX} takes the advantage of this and these data can be used in the inner loop. While the data need in the inner loop of \texttt{smoothSerialXY} are not stored consecutively, more memory fetches are needed. 
\end{enumerate}

\section{Problem 2}
Create a parallel for loop implementation in the function \texttt{smoothParallelYXFor}. This should consist of adding an OpenMP parallel for directive around the outer loop of \texttt{smoothSerialYX}.
\begin{enumerate}
\item Generate speedup plots for 1, 2, 4, 8, 16 and 32 threads. You will have to specify the number of threads to run using \texttt{omp_set_num_threads}.\\
Fig. \ref{fig:yxspeedup} shows the speedup for 1, 2, 4, 8, 16 and 32 threads. A kernel width of $5$ is chosen in this experiment.
\begin{figure}[h]
    \centering
    \includegraphics[width=4in]{yxparallelspeedup.eps}
    \caption{Speedup for different number of threads}
    \label{fig:yxspeedup}
\end{figure}
\item \textbf{Describe the results. What type of speedup was realized? When did speedup tail off? Why? What hardware did this run on and how did that influence your result.}\\
With the number of threads increasing from $1$ to $8$, a linear speedup is readlized. When the number of threads goes beyond $8$, the speedup begins to tail off. This is because I am running this program on a 8-core machine. The optimal number of threads is $8$. When the number of threads reaches $8$, the processors have already been fully utilized. 
\item \textbf{Estimate the value of $p$ in Amdahl's law based on your results for $1$ to $8$ threads}.\\
\end{enumerate}

\section{Problem 3}
Create a parallel for loop implementation in the function \texttt{smoothParallelXYFor}. This should consist of adding an OpenMP parallel for directive around the outer loop of \texttt{smoothSerialXY}.

\begin{enumerate}
\item \textbf{Generate speedup plots for 1, 2, 4 and 8 threads.}\\

\item \textbf{Qualitatively compare the speedup of this code to the YX parallel version. Explain the differences. \textit{Note:} this question is about the relative speedup, not the relative performace of the serial versions.}\\

\end{enumerate}
\section{Problem 4}
Create a function \texttt{smoothParallelForCoalesced} that coalesces the two for loops in to a single loop.
\begin{enumerate}
\item \textbf{Generate speedup plots for 1, 2, 4 and 8 threads.}
\item \textbf{Did coalescing the loop improve absolute performance or speedup? Explain why or why not (for both absolute performance and speedup.)}
\end{enumerate}
\section{Problem 5}
Write and compare the following two programs for computing the smoothed value of two arrays. Program \#1 uses two invocations of \texttt{smoothParallelYXFor}. Program \#2 merges the two loops, evaluating both arrays in a single parallel OpenMP for loop.

\begin{enumerate}
\item Generate speedup plots for 1, 2, 4 and 8 threads.

\item What is the realtive performance of the two programs. What benefit dows loop merging have on this code? Explain why.
\end{enumerate}

\end{document}




































