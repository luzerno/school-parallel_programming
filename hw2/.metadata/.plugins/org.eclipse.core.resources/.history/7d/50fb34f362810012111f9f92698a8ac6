import java.io.ObjectInputStream.GetField;
import java.util.Random;

import javax.crypto.SealedObject;

public class ParallelBruteForceDES {
	private static Thread[] threads;
	private static DecryptThread[] decryptThreads;
//	private static SealedObject sealedObj;
	private static long numThreads;
	private static long numKeyBits;
	private static long maxkey;
	private static String text;
	
	private static void parseArgs(String[] args) {
		if (args.length != 2) {
			System.err.println("Usage: BruteForceDES #threads key_size_in_bits");
			System.exit(0);
		}
		try {
			numThreads = Long.parseLong(args[0]);
			numKeyBits = Long.parseLong(args[1]);
		} catch (NumberFormatException e) {
			System.err.println("Usage: BruteForceDES #threads key_size_in_bits");
		}
	}
	private static SealedObject getSealedText(String text) {
		maxkey = ~(0L);
		maxkey = maxkey >>> (64 - numKeyBits);
		SealedDES enccipher = new SealedDES();
		Random generator = new Random();
		long key = generator.nextLong();
		key = key & maxkey;
		enccipher.setKey(key);
		SealedObject sealedObj = enccipher.encrypt(text);
		return sealedObj;
	}
	private static void initDecryptThreads() {
		long numKeysPerThread = maxkey / numThreads;
		long numRemainKeys = maxkey % numThreads;
		long currentKey = 0;
		for (long i = 0; i < numThreads; i++) {
			long num = numKeysPerThread;
			if (numRemainKeys > 0) {
				num++;
				numRemainKeys--;
			}
			decryptThreads[i] = new DecryptThread(getSealedText(text), i, currentKey, currentKey + num);
		}
	}
	
	public static void main(String[] args) {
		text = "Johns Hopkins afraid of the big bad wolf?";
		parseArgs(args);
		initDecryptThreads();
	}
}
